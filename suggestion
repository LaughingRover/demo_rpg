1) I would have created a single Typedef.h file to store all my typedef's in rather then a unique one for each because if I ever need to change a typdef down the line, I know exactly where it is rather then having to choose between half a dozen header files.  this is exemplified later when you change a typedef, at this point it is easy because you have only done it twice, but as your program grows and you do this more, it could get cumbersome to maintain all the different typedef headers.
2) I would not have used hptypes and stattypes as my typedef names, I would have instead used stattype and hptype as these are easier to know at just a glance what they are supposed to represent and can be used as types for other variable and function returns with out having weird or nonsensical names.  For example it would not make sense for a spell damage from your wizard to return an hptype ex:

hptype FireBall( hptype spLevel ) { //do something; }
vs
hptype FireBall (hptype spLevel ) { // do something; }

or how about a level incrementer.
hptype LevelIncrement () {
    if (hptype xp  > SomeNumber) { return Warrior.CharacterLevel++; }
    else { return Warrior.CharacterLevel; }
vs
hptype LevelIncrement () {
    if (hptype xp > SomeNumber) { return Warrior.CharacterLevel++; }
    else { return Warrior.CharacterLevel; }


3) instead of making HP a parent class, I would instead make a Character Class with HP and StatBlock as data members of, and then make Warrior, Wizard, ... subclasses of the Character Class.
